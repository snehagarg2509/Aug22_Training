#include <stdio.h>
#include<string.h>
#include<stdlib.h>
 
#define SIZE 25
 
#define SUCCESS 0
#define FAILURE 1
 
typedef struct Node
{
	char *str;
	struct Node *next;
}Node;  
 
void myfflush(void)
{
    while('\n' != getchar());
}
 
void get_string_input(char *input)
{
	while(1)
	{
		fgets(input,SIZE-1, stdin);
		int len = strlen(input);
		if(len == 1)
		{	
			printf("\t Empty String, enter again:  ");
			memset(input, 0, SIZE);
			continue;
		}
		if(input[len-1] == '\n')
		{
			input[len-1] ='\0';
		}
		else
		{
			myfflush();
		}
		break;
	}
}
 
int create_node(Node **new_node, int data_len)
{
    *new_node = (Node *)malloc(sizeof(Node));
     if (NULL == *new_node)
     {
         perror("error while creating node");
         return FAILURE;
     }
 
    (*new_node)->str = (char *)calloc(data_len, sizeof(char));
    if (NULL == (*new_node)->str)
    {
         perror("error while creating node, allocating memory for str");
         return FAILURE;
 
    }
    (*new_node)->next = NULL;
    return SUCCESS;
}
 
int insert_at_beg(Node **head, char *str)
{
    Node *new_node = NULL;
    if (FAILURE == create_node(&new_node, strlen(str) + 1))
    {
        return FAILURE;
    }
    strcpy(new_node->str, str);
 
    new_node->next = *head;
    *head = new_node;
 
    return SUCCESS;
}
int insert_in_middle(Node **head, char *str, char *after)
{
    Node *tmp = NULL;
 
    Node *new_node = NULL;
    if (FAILURE == create_node(&new_node, strlen(str) + 1))
    {
        return FAILURE;
    }
    strcpy(new_node->str, str);
 
    if(NULL == *head)
    {
        *head = new_node;
        return SUCCESS;
    }
 
    tmp = *head;
 
    while (NULL != tmp->next)
    {
        if(!strcmp(tmp->str, after))
        {
            new_node->next = tmp->next;
            tmp->next = new_node;
            return SUCCESS;
        }
        tmp = tmp->next;
    }
 
    tmp->next = new_node;
 
    return SUCCESS;
}
 
int insert_at_end(Node **head, char *str)
{
    Node *tmp = NULL;
 
    Node *new_node = NULL;
    if (FAILURE == create_node(&new_node, strlen(str) + 1))
    {
        return FAILURE;
    }
    strcpy(new_node->str, str);
 
    if(NULL == *head)
    {
        *head = new_node;
        return SUCCESS;
    }
 
    tmp = *head;
 
    while (NULL != tmp->next)
    {
        tmp = tmp->next;
    }
 
    tmp->next = new_node;
 
    return SUCCESS;
}
int delete_at_beg(Node **head)
{
    Node *tmp = *head;
        
    if(NULL == tmp)
    {
        printf("\tList is empty, deletion failed");
        return FAILURE;
    }
 
    *head = (*head)->next;
    free(tmp->str);
    free(tmp);
    
    return SUCCESS;
}
 
int delete_in_middle(Node **head, char *str)
{
    Node *tmp = *head;
 
    if(NULL == tmp)
    {
        printf("\tList is empty, deletion failed\n");
        return FAILURE;
    }
    else
    {
        if(strcmp(tmp->str, str)==0)
        {
            *head = tmp->next;
            free(tmp->str);
            free(tmp);
            return SUCCESS;
        }
    }
 
    if(NULL == tmp->next)
    {
        printf("\t\"%s\" does not exist in the list\n", str);
        return FAILURE;
    }
 
    do
    {
        if (!strcmp(tmp->next->str, str))
        {
            Node *free_node = tmp->next;
            tmp->next = tmp->next->next;
            free(free_node->str);
            free(free_node);
            return SUCCESS;
        }
        tmp = tmp->next;
    }while (NULL != tmp->next);
 
    printf("\t\"%s\" does not exist in the list\n", str);
    return FAILURE;
}
 
int delete_at_end(Node **head)
{
    Node *tmp = *head;
 
    if(NULL == tmp)
    {
        printf("\tList is empty, deletion failed\n");
        return FAILURE;
    }
 
    if(NULL == tmp->next)
    {
        free(tmp->str);
        free(tmp);
        *head = NULL;
        return SUCCESS;
 
    }
 
    while (NULL != tmp->next->next)
    {
        tmp = tmp->next;
    }
 
    Node *free_node = tmp->next;
    tmp->next = NULL;
    free(free_node->str);
    free(free_node);
 
    return SUCCESS;
 
}
void display_list(Node *head)
{
    if (NULL == head)
    {
        printf("\tList is empty\n");
        return ;
    }
    else
    {
        printf("\tElements in list are:\n");
    
    while(head != NULL)
    {
        printf("\t%s\n", head->str);
        head = head->next;
    }
}
 
}
 
 
void free_list(Node **head)
{
    Node *tmp = *head;
    while (tmp != NULL)
    {
       Node *free_node = tmp;
       tmp = tmp->next;
       free(free_node->str);
       free(free_node);
    }
    *head = NULL;
}
 
 
 
 
int main()
{
    Node *head = NULL;
    
    while (1)
    {
        
        system("clear");
        int choice = 0;
        char str[SIZE];
        char after[SIZE];
        
        memset(str, 0, SIZE);
        memset(after, 0, SIZE);
       
        printf("\n**************Linked List Operation******************\n\n");
        printf("\t1. Insert at Beginning\n");
        printf("\t2. Insert after a Node\n");
        printf("\t3. Insert at End\n");
        printf("\t4. Delete at Beginning\n");
        printf("\t5. Delete a specified Node\n");
        printf("\t6. Delete at End\n");
        printf("\t7. Display\n");
        printf("\t8. Exit\n\n");
        printf("\tEnter your choice: ");
        scanf("%d", &choice);
        myfflush();
 
        switch(choice)
        {
            case 1:
                printf("\tenter string: ");
                get_string_input(str);
                if (SUCCESS == insert_at_beg(&head, str))
                {
                    printf("\tInserted Successfully\n");
                }
                break;
 
            case 2:
                printf("\tenter string: ");
                get_string_input(str);
                printf("\tenter string after which you want to insert: ");
                get_string_input(after);
                if (SUCCESS == insert_in_middle(&head, str, after))
                {
                    printf("\tInserted Successfully\n");
                }
                break;
 
            case 3:
                printf("\tenter string: ");
                get_string_input(str);
                if (SUCCESS == insert_at_end(&head, str))
                {
                    printf("\tInserted Successfully\n");
                }
                break;
 
            case 4:
                if (SUCCESS == delete_at_beg(&head))
                {
                    printf("\tDeleted Successfully\n");
                }
                break;
 
            case 5:
                printf("\tenter string which you want to delete: ");
                get_string_input(str);
                if (SUCCESS == delete_in_middle(&head, str))
                {
                    printf("\tDeleted Successfully\n");
                }
                break;
 
            case 6:
                if (SUCCESS == delete_at_end(&head))
                {
                    printf("\tDeleted Successfully\n");
                }
                break;
 
 
            case 7:
                display_list(head);
                break;
 
            case 8:
                free_list(&head);
                printf("\texited\n");
                return SUCCESS;
     
            default:
                printf("\twrong choice, try again\n");
                break;
        }
        printf("\n\tpress enter to continue...");
        myfflush();
    }
    return SUCCESS;
}